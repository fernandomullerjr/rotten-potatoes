version: '3'
services:

  flask:
    build:
      context: app
      dockerfile: Dockerfile
    container_name: flask
    image: fernandomj90/app-rotten-potatoes:v1
    ports:
      - 5000:5000
    environment:
      APP_PORT: 5000
      MONGODB_DB: admin
      MONGODB_DATABASE: admin
      MONGODB_USERNAME: mongouser
      MONGODB_PASSWORD: mongopwd
      MONGODB_HOSTNAME: mongodb
      MONGODB_HOST: mongodb
      MONGODB_PORT: 27017
#    volumes:
#      - appvolume:/app
    depends_on:
      - mongodb
    networks:
      - frontend
      - backend

  mongodb:
    image: mongo:4.0.8
    container_name: mongodb
    restart: unless-stopped
    command: mongod --auth
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongouser
      MONGO_INITDB_ROOT_PASSWORD: mongopwd
      MONGO_INITDB_DATABASE: admin
      MONGODB_DATABASE: admin
      MONGODB_USER: mongouser
      MONGODB_PASS: mongopwd
      MONGODB_DATA_DIR: /data/db
      MONDODB_LOG_DIR: /dev/null
    ports:
      - "27017:27017"
    volumes:
      - mongodbdata:/data/db
    networks:
      - backend

  webserver:
    build:
      context: nginx
      dockerfile: Dockerfile
    image: fernandomj90/nginx-alpine-desafio-docker:3.15.4
    container_name: webserver
    restart: unless-stopped
    tty: true
    environment:
      APP_ENV: "prod"
      APP_NAME: "webserver"
      APP_DEBUG: "true"
      SERVICE_NAME: "webserver"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - nginxdata:/var/log/nginx
    depends_on:
      - flask
    networks:
      - frontend

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge

volumes:
  mongodbdata:
#  appvolume:
  nginxdata: